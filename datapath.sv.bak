module datapath(clk, reset, i_pc_rddata, o_ldst_addr, o_ldst_wrdata, i_ldst_rddata, o_tb_regs, o_pc_addr,
				//fetch
				ld_pc, pc_in_sel, pc_addr_sel,
				//decode
				ld_rx, ld_ry, ld_pc_dc, ld_ir_dc,
				//execute
				sel_alu_a, sel_alu_b, addsub, ld_alu_r, ld_nz, ld_pc_ex, ld_ir_ex,
				//fetch
				ld_pc_ac, ld_ir_ac, wr_en, sel_datain,
				//cntrl
				r_ir_dc, r_ir_ex, r_ir_ac);
	/* ---------------------------------------------------- SIGNALS ---------------------------------------------------- */
	/*INPUTS*/
	input clk, reset;
	input [15:0] i_pc_rddata, i_ldst_rddata;

	//fetch signals
	input ld_pc;
	input [1:0] pc_in_sel, pc_addr_sel;

	//decode signals
	input ld_rx, ld_ry, ld_pc_dc, ld_ir_dc;

	//execute
	input [1:0] sel_alu_a, sel_alu_b;
	input addsub, ld_alu_r, ld_nz, ld_pc_ex, ld_ir_ex;

	//access
	input ld_pc_ac, ld_ir_ac;

	//access
	input wr_en;
	input [1:0] sel_datain;

	/*OUTPUTS*/
	output [15:0] o_pc_addr, o_ldst_addr, o_ldst_wrdata;
	output logic [15:0] r_ir_dc, r_ir_ex, r_ir_ac;
	output [7:0][15:0] o_tb_regs;

	/* ---------------------------------------------------- INTERNAL ---------------------------------------------------- */	
	//registers
	logic [15:0] r_pc, r_pc_dc, r_pc_ex, r_pc_ac, r_rf_rx, r_rf_ry, r_alu_r;
	logic r_alu_n, r_alu_z;

	//wires
	logic [15:0] w_pc_r, w_pc_nxt, w_pc_addr, rf_datax, rf_datay, data_in, datax, datay, alu_a, alu_b, alu_r, w_ir_dc;
	logic [2:0] rx, ry, w_r;
	logic alu_n, alu_z;

	/*MODULE INSTANT*/
	regfile rf(.clk(clk), .reset(reset), .wr_en(wr_en), .rx(rx), .ry(ry), .w_r(w_r), 
				.data_in(data_in), .datax(rf_datax), .datay(rf_datay), .regs(o_tb_regs));

	/* CLOCKED REGISTERS */
	always_ff @(posedge clk, posedge reset) begin
		if(reset) begin
			r_pc <= 16'b0;
			r_ir_dc <= 16'b0;
			r_pc_dc <= 16'b0; 
			r_ir_ex <= 16'b0;
			r_pc_ex <= 16'b0; 
			r_ir_ac <= 16'b0; 
			r_pc_ac <= 16'b0;
			r_rf_rx <= 16'b0; 
			r_rf_ry <= 16'b0;
			r_alu_r <= 16'b0;
			r_alu_n <= 1'b0;
			r_alu_z <= 1'b0;
		end
		else begin
			//fetch
			if (ld_pc) r_pc <= w_pc_r;
			//decode
			if (ld_pc_dc) r_pc_ac <= r_pc; //pc_add?
			if (ld_ir_dc) r_ir_dc <= w_ir_dc;
			if (ld_rx) r_rf_rx <= rf_datax; //reading files
			if (ld_ry) r_rf_ry <= rf_datay;
			//execute
			if (ld_alu_r) r_alu_r <= alu_r;
			if (ld_nz) begin
				r_alu_n <= alu_n;
				r_alu_z <= alu_z;
			end
			if (ld_pc_ex) r_pc_ex <= r_pc_dc;
			if (ld_ir_ex) r_ir_ex <= r_ir_dc;
			//access
			if (ld_pc_ac) r_pc_ac <= r_pc_ex;
			if (ld_ir_ac) r_ir_ac <= r_ir_ex;
		end
	end


	/* COMB LOGIC */

	//fetch
	assign w_pc_nxt = r_pc + 2'b10; //+2

	always_comb begin
		case (pc_in_sel)
		0: w_pc_r = w_pc_nxt;        //not j or call
		default: w_pc_r = '0;
		endcase
		case (pc_addr_sel)
			0: w_pc_addr = r_pc;
			default w_pc_addr = 0;
		endcase
  	end

  	//decode
  	assign w_ir_dc = i_pc_rddata;
  	assign rx = w_ir_dc[7:5];
  	assign ry = w_ir_dc[10:8];

  	//execute
  	always_comb begin
  		case(sel_alu_a)
			2'b0: alu_a = r_rf_rx;
			2'b1: alu_a = 16'b0;
			default: ;
		endcase
		case(sel_alu_b)
			2'b0: alu_b = r_rf_ry;
			2'b1: alu_b = {{8{r_ir_ex[15]}}, r_ir_ex[15:8]}; //sextimm8 from ir {{8{imm8[7]}}, imm8};
			2'b10: alu_b = {r_ir_ex[15:8], 8'b0}; //mvhi from ir
			default alu_b = 16'b0;
		endcase

		alu_r = (addsub) ? alu_a + alu_b : alu_a - alu_b;
  	end

	assign alu_n = alu_r[15];
	assign alu_z = (alu_r == 16'b0);

	//access
	assign w_r = r_ir_ac[7:5];

	always_comb begin
		case(sel_datain)
			1: data_in = r_alu_r;
			2: data_in = i_ldst_rddata;
		endcase
	end
	/* ---------------------------------------------------- EXTERNAL ---------------------------------------------------- */
	//output logic
	//fetch
	assign o_pc_addr = w_pc_addr;
	
	//execute
	assign o_ldst_addr = r_rf_ry;
	assign o_ldst_wrdata = r_rf_rx;

endmodule